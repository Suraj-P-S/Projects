jabba=10;
user_id=1;
ch=0;
poss=4;
while ch~=poss
    ch=menu('Speaker recognition System','Add your voice to database',...
        'Speaker Identification','Database Info','exit');
    if ch==1
        %% adding a sound to the database
        if(exist('name_database.dat','file'))
            load('name_database.dat','-mat');
            classe = input('Insert your name id:','s');
            if isempty(classe)
                classe = {'user%d',user_id};
                user_id=user_id+1;
                disp(classe);
            end
            message=('The following parameters will be used during recording:');
            disp(message);
            message=strcat('Sampling frequency',num2str(samplingfrequency));
            disp(message);
            message=strcat('Bits per sample',num2str(samplingbits));
            disp(message);
            durata = input('Insert the duration of the recording (in seconds):');
            if isempty(durata)
                durata = 3;
                disp( num2str(durata) );
            end
            micrecorder = audiorecorder(samplingfrequency,samplingbits,1);
            disp('Now, speak into microphone...');
            recordblocking(micrecorder,durata);
            %play(micrecorder)
            
            while (isrecording(micrecorder)==1)
                disp('Recording...');
                pause(0.5);
            end
            disp('Recording stopped.');
            y1 = getaudiodata(micrecorder);
            y = getaudiodata(micrecorder, 'uint8');
            if size(y,2)==2
                y=y(:,1);
            end
            y = double(y);
            
            sound_number = sound_number+1;
            speaker_num=speaker_num+1;
            data{sound_number,1} = y;
            data{sound_number,4} = num2str(speaker_num);
            data{sound_number,2} = classe;
            data{sound_number,3} = 'Microphone';
            st=strcat(num2str(speaker_num),'.wav');
            audiowrite(st,y1,samplingfrequency);
            save('name_database.dat','data','sound_number','speaker_num','-append');
            msgbox('Sound added to database','Database result','help');
            disp('Sound added to database');
        else
            classe = input('Insert your name id:','s');
            if isempty(classe)
                classe = {'user%d',user_id};
                user_id=user_id+1;
                disp(classe);
            end
            durata = input('Insert the duration of the recording (in seconds):');
            if isempty(durata)
                durata = 3;
                disp( num2str(durata) );
            end
            samplingfrequency = 22050;
            samplingbits = 8;
            micrecorder = audiorecorder(samplingfrequency,samplingbits,1);
            disp('Now, speak into microphone...');
            recordblocking(micrecorder,durata);
            
            while (isrecording(micrecorder)==1)
                disp('Recording...');
                pause(0.5);
            end
            disp('Recording stopped.');
            y1 = getaudiodata(micrecorder);
            y = getaudiodata(micrecorder, 'uint8');
            if size(y,2)==2
                y=y(:,1);
            end
            
            y = double(y);
            sound_number = 1;
            speaker_num=1;
            data{sound_number,1} = y;
            data{sound_number,4} = num2str(speaker_num);
            data{sound_number,2} = classe;
            data{sound_number,3} = 'Microphone';
            st=strcat(num2str(speaker_num),'.wav');
            audiowrite(st,y1,samplingfrequency);
            save('name_database.dat','data','sound_number','speaker_num','samplingfrequency','samplingbits');
            msgbox('Sound added to database','Database result','help');
            disp('Sound added to database');
        end
    end
    
    
    if ch==2
        %% Voice Recognition
        if (exist('name_database.dat','file'))
            load('name_database.dat','-mat');
            Fs = samplingfrequency;
            durata = input('Insert the duration of the recording (in seconds):');
            if isempty(durata)
                durata = 3;
                disp( num2str(durata) );
            end
            micrecorder = audiorecorder(samplingfrequency,samplingbits,1);
            disp('Now, speak into microphone...');
            recordblocking(micrecorder,durata);
            
            while (isrecording(micrecorder)==1)
                disp('Recording...');
                pause(0.5);
            end
            disp('Recording stopped.');
            y1 = getaudiodata(micrecorder);
            y = getaudiodata(micrecorder, 'uint8');
            % if the input sound is not mono
            if size(y,2)==2
                y=y(:,1);
            end
            y = double(y);
            st='test.wav';
            audiowrite(st,y1,samplingfrequency);
            %----- code for speaker recognition -------
            disp('MFCC cofficients computation and VQ codebook training in progress...');
            disp(' ');
            % Number of centroids required
            k =16;
            
            for ii=1:sound_number
                % Compute MFCC cofficients for each sound present in database
                v = mfcc(data{ii,1}, Fs);
                % Train VQ codebook
                code{ii} = vqlbg(v, k);
                disp('...');
            end
            disp('Completed.');
            % Compute MFCC coefficients for input sound
            v = mfcc(y,Fs);
            % Current distance and sound ID initialization
            distmin = Inf;
            k1 = 0;
            
            for ii=1:sound_number
                d = disteu(v, code{ii});
                dist = sum(min(d,[],2)) / size(d,1);
                message=strcat('For User #',num2str(ii),' Dist : ',num2str(dist));
                disp(message);
                
                if dist < distmin
                    distmin = dist;
                    k1 = ii;
                end
            end
            
            if distmin < jabba
                min_index = k1;
                speech_id = data{min_index,2};
                %-----------------------------------------
                disp('Matching sound:');
                message=strcat('File:',data{min_index,3});
                disp(message);
                message = strcat('Recognized speaker ID: ',speech_id);
                disp(message);
                msgbox(message,'Matching result','help');
                
                ch3=0;
                while ch3~=3
                    ch3=menu('Matched result verification:','Recognized Sound','Recorded sound','Exit');
                    
                    if ch3==1
                        st=strcat(num2str(k1),'.wav');
                        [s ,fs ]=audioread(st);
                        p=audioplayer(s,fs);
                        play(p);
                    end
                    
                    if ch3==2
                        [s ,fs]=audioread('test.wav');
                        p=audioplayer(s,fs);
                        play(p);
                    end
                end
                
            else
                warndlg('Wrong User . No matching Result.',' Warning ')
            end
        else
            warndlg('Database is empty. No matching is possible.',' Warning ')
        end
    end
    
    %% Database Information
    
    if ch==3
        if (exist('name_database.dat','file'))
            load('name_database.dat','-mat');
            message=strcat('Database has #',num2str(sound_number),'words:');
            disp(message);
            disp(' ');
            
            for ii=1:sound_number
                message=strcat('Location:',data{ii,3});
                disp(message);
                message=strcat('Sound ID:',num2str(data{ii,2}));
                disp(message);
                message=strcat('Speaker Number:',num2str(data{ii,4}));
                disp(message);
                disp('-');
            end
            
            ch4=0;
            while ch4 ~=3
                ch4=menu('Database Information','Play Sound','Delete','Exit');
                
                if ch4==1
                    
                    st=strcat('Sound Database has : #',num2str(sound_number),...
                        'words. Enter a database number : #');
                    
                    prompt = {st};
                    dlg_title = 'Database Information';
                    num_lines = 1;
                    def = {'1'};
                    options.Resize='on';
                    options.WindowStyle='normal';
                    options.Interpreter='tex';
                    an = inputdlg(prompt,dlg_title,num_lines,def);
                    an=cell2mat(an);
                    a=str2double(an);
                    
                    if (isempty(an))
                        warndlg('Empty','warning');
                    else
                        
                       
                            st=strcat(num2str(an),'.wav');
                            [s ,fs ]=audioread(st);
                            p=audioplayer(s,fs);
                            play(p);
                    end
                end
                
%% Delete Database
                
                if ch4==2
                    button = questdlg('Do you really want to remove the Database?');
                    
                    if strcmp(button,'Yes')
                        
                        prompt={'Enter speaker_number you want to delete'};
                        dlgtitle='Delete audio';
                        dims=[1 40];
                        definput={'1'};
                        def_id=inputdlg(prompt,dlgtitle,dims,definput);
                        def_id=cell2mat(def_id);
                        dlt_id=find(cell2mat(data(:,4))==def_id);
                        
                        %for ii=1:sound_number
                        st=strcat(num2str(def_id),'.wav');
                        delete(st);
                        data(dlt_id,:)=[];
                        sound_number=sound_number-1;
                        save('name_database.dat','data','sound_number','speaker_num','samplingfrequency','samplingbits');
                        %end
                        
                        if (exist('test.wav','file'))
                            delete('test.wav');
                        end
                        
                    end
                    disp(data);
                end
                
                
            end
        else
            warndlg('Database is empty.',' Warning ')
        end
    end
    
end
close all;
msgbox('Thank You');
%% Frame Blocking
function M3 = blockFrames(s,fs, m, n)
l = length(s);
nbFrame = floor((l - n) / m) + 1;
for i = 1:n
    for j = 1:nbFrame
        M(i, j) = s(((j - 1) * m) + i);
    end
end
%% Windowing
h = hamming(n);
M2 = diag(h) * M;
%% Fast Fourier Transform
for i = 1:nbFrame
    M3(:, i) = fft(M2(:, i)); 
end
end
%% Mel Frequency Filter:
function m = melfb(p, n, fs)
f0 = 700 / fs; 
fn2 = floor(n/2); 
lr = log(1 + 0.5/f0) / (p+1); 
% convert to fft bin numbers with 0 for DC term 
bl = n * (f0 * (exp([0 1 p p+1] * lr) - 1)); 
b1 = floor(bl(1)) + 1; 
b2 = ceil(bl(2)); 
b3 = floor(bl(3)); 
b4 = min(fn2, ceil(bl(4))) - 1; 
pf = log(1 + (b1:b4)/n/f0) / lr; 
fp = floor(pf); 
pm = pf - fp; 
r = [fp(b2:b4) 1+fp(1:b3)]; 
c = [b2:b4 1:b3] + 1; 
v = 2 * [1-pm(b2:b4) pm(1:b3)]; 
m = sparse(r, c, v, p, 1+fn2); 
end
%% Cepstrum
function r = mfcc(s, fs)
m = 100;
n = 256;
frame=blockFrames(s, fs, m, n);
m = melfb(20, n, fs);
n2 = 1 + floor(n / 2);
z = m * abs(frame(1:n2, :)).^2;
r = dct(log(z));
end

function r = vqlbg(d,k)
e = .01;
r = mean(d, 2);
dpr = 10000;
for i = 1:log2(k)
    r = [r*(1+e), r*(1-e)];
    while (1 == 1)
        z = disteu(d, r);
        [m,ind] = min(z, [], 2);
        t = 0;
        for j = 1:2^i
            r(:, j) = mean(d(:, find(ind == j)), 2); %#ok<FNDSB>
            x = disteu(d(:, find(ind == j)), r(:, j)); %#ok<FNDSB>
            for q = 1:length(x)
                t = t + x(q);
            end
        end
        if (((dpr - t)/t) < e)
            break;
        else
            dpr = t;
        end
    end
end
end
function d = disteu(x, y) 
[M, N] = size(x);
[M2, P] = size(y);
if (M ~= M2) 
error('Matrix dimensions do not match.') 
end 
d = zeros(N, P);
for ii=1:N 
for jj=1:P 
%d(ii,jj)=sum((x(:,ii)-y(:,jj)).^2).^0.5; 
d(ii,jj) = mydistance(x(:,ii),y(:,jj),2); 
end 
end
end
 
function [out] = mydistance(x,y,tipo) 
if tipo == 0 
out = sum((x-y).^2).^0.5; 
end 
% Distance sum | x -y | 
if tipo == 1 
out = sum(abs(x-y)); 
end 
% Weighted distance 
if tipo == 2 
pesi = zeros(size(x));
pesi(1) = 0.20; 
pesi(2) = 0.90; 
pesi(3) = 0.95; 
pesi(4) = 0.90; 
pesi(5) = 0.70; 
pesi(6) = 0.90; 
pesi(7) = 1.00; 
pesi(8) = 1.00; 
pesi(9) = 1.00; 
pesi(10) = 0.95; 
pesi(11:13) = 0.30; 
out = sum(abs(x-y).*pesi); 
%out = sum(pesi.*(x-y).^2).^0.5; 
end
end
